// <auto-generated />
using System;
using Koishibot.Core.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Koishibot.Core.Persistence.Migrations
{
    [DbContext(typeof(KoishibotDbContext))]
    [Migration("20250326000345_RemoveWordpressTag")]
    partial class RemoveWordpressTag
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Koishibot.Core.Features.ApplicationAuthentication.Models.AppLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AppLogin", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.AttendanceLog.Models.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttendanceCount")
                        .HasColumnType("int");

                    b.Property<int?>("LastAttendedSessionId")
                        .HasColumnType("int");

                    b.Property<int>("StreakCurrentCount")
                        .HasColumnType("int");

                    b.Property<bool>("StreakOptOut")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StreakPersonalBest")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Attendances", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.ChannelPoints.Models.ChannelPointRedemption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelPointRewardId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("WasSuccesful")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelPointRewardId");

                    b.HasIndex("UserId");

                    b.ToTable("ChannelPointRedemptions", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.ChannelPoints.Models.ChannelPointReward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GlobalCooldownSeconds")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGlobalCooldownEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMaxPerStreamEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMaxPerUserPerStreamEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUserInputRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxPerStream")
                        .HasColumnType("int");

                    b.Property<int>("MaxPerUserPerStream")
                        .HasColumnType("int");

                    b.Property<bool>("ShouldRedemptionsSkipRequestQueue")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TwitchId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("TwitchId");

                    b.ToTable("ChannelPointRewards", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.ChannelPoints.Models.KoiKinDragon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("KoiKinDragons", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.ChatCommands.Models.ChatCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan>("GlobalCooldown")
                        .HasColumnType("time(6)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("UserCooldown")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.ToTable("ChatCommands", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.ChatCommands.Models.CommandName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChatCommandId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ChatCommandId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CommandNames", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.ChatCommands.Models.CommandTimerGroup", b =>
                {
                    b.Property<int>("ChatCommandId")
                        .HasColumnType("int");

                    b.Property<int>("TimerGroupId")
                        .HasColumnType("int");

                    b.HasKey("ChatCommandId", "TimerGroupId");

                    b.HasIndex("TimerGroupId");

                    b.ToTable("CommandTimerGroup");
                });

            modelBuilder.Entity("Koishibot.Core.Features.ChatCommands.Models.TimerGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("Interval")
                        .HasColumnType("time(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TimerGroups");
                });

            modelBuilder.Entity("Koishibot.Core.Features.Dandle.Models.DandleResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DandleWordId")
                        .HasColumnType("int");

                    b.Property<int>("GuessCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DandleWordId");

                    b.ToTable("DandleResults", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.Dandle.Models.DandleWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("Word")
                        .IsUnique();

                    b.ToTable("DandleWords", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.Obs.Models.ObsItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppName")
                        .HasColumnType("longtext");

                    b.Property<string>("ObsId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ObsName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ObsItems", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.Polls.Models.PollResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChoiceFive")
                        .HasColumnType("longtext");

                    b.Property<string>("ChoiceFour")
                        .HasColumnType("longtext");

                    b.Property<string>("ChoiceOne")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ChoiceThree")
                        .HasColumnType("longtext");

                    b.Property<string>("ChoiceTwo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("VoteFive")
                        .HasColumnType("int");

                    b.Property<int?>("VoteFour")
                        .HasColumnType("int");

                    b.Property<int>("VoteOne")
                        .HasColumnType("int");

                    b.Property<int?>("VoteThree")
                        .HasColumnType("int");

                    b.Property<int>("VoteTwo")
                        .HasColumnType("int");

                    b.Property<string>("WinningChoice")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Polls", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.RaidSuggestions.Models.OutgoingRaid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RaidedUserId")
                        .HasColumnType("int");

                    b.Property<int?>("StreamSessionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("SuggestedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RaidedUserId");

                    b.HasIndex("StreamSessionId")
                        .IsUnique();

                    b.HasIndex("SuggestedByUserId");

                    b.ToTable("OutgoingRaids", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.Raids.Models.IncomingRaid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RaidedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ViewerCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RaidedByUserId");

                    b.ToTable("IncomingRaids", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.StreamInformation.Models.LiveStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("EndedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StreamSessionId")
                        .HasColumnType("int");

                    b.Property<string>("TwitchId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VideoId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("StreamSessionId");

                    b.HasIndex("TwitchId")
                        .IsUnique();

                    b.ToTable("LiveStreams", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.StreamInformation.Models.StreamCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TwitchId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StreamCategories", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.StreamInformation.Models.StreamSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AttendanceMandatory")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<int>("YearlyQuarterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YearlyQuarterId");

                    b.ToTable("StreamSessions", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.StreamInformation.Models.StreamStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("StreamCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("StreamSessionId")
                        .HasColumnType("int");

                    b.Property<string>("StreamTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ViewerCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StreamCategoryId");

                    b.ToTable("StreamStats", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.StreamInformation.Models.YearlyQuarter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("YearlyQuarters", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.Supports.Models.ChannelFollow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChannelFollow", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.Supports.Models.GiftSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GiftSubscriptions", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.Supports.Models.HypeTrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("EndedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LevelCompleted")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("HypeTrain", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.Supports.Models.Kofi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("KofiTransactionId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("KofiType")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TransactionUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Kofi", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.Supports.Models.SETip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StreamElementsId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SETips", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.Supports.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Gifted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.Supports.Models.SupportTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BitsCheered")
                        .HasColumnType("int");

                    b.Property<int>("MonthsSubscribed")
                        .HasColumnType("int");

                    b.Property<int>("SubsGifted")
                        .HasColumnType("int");

                    b.Property<int>("Tipped")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("SupportTotals", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.Supports.Models.TwitchCheer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BitsAmount")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cheers", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.TwitchUsers.Models.TwitchUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TwitchId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("TwitchId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Koishibot.Core.Features.AttendanceLog.Models.Attendance", b =>
                {
                    b.HasOne("Koishibot.Core.Features.TwitchUsers.Models.TwitchUser", "User")
                        .WithOne("Attendance")
                        .HasForeignKey("Koishibot.Core.Features.AttendanceLog.Models.Attendance", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Koishibot.Core.Features.ChannelPoints.Models.ChannelPointRedemption", b =>
                {
                    b.HasOne("Koishibot.Core.Features.ChannelPoints.Models.ChannelPointReward", "ChannelPointReward")
                        .WithMany("ChannelPointRedemptions")
                        .HasForeignKey("ChannelPointRewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Koishibot.Core.Features.TwitchUsers.Models.TwitchUser", "TwitchUser")
                        .WithMany("RedeemedChannelPointRewards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelPointReward");

                    b.Navigation("TwitchUser");
                });

            modelBuilder.Entity("Koishibot.Core.Features.ChannelPoints.Models.KoiKinDragon", b =>
                {
                    b.HasOne("Koishibot.Core.Features.TwitchUsers.Models.TwitchUser", "TwitchUser")
                        .WithMany("KoiKinDragons")
                        .HasForeignKey("UserId");

                    b.Navigation("TwitchUser");
                });

            modelBuilder.Entity("Koishibot.Core.Features.ChatCommands.Models.CommandName", b =>
                {
                    b.HasOne("Koishibot.Core.Features.ChatCommands.Models.ChatCommand", "ChatCommand")
                        .WithMany("CommandNames")
                        .HasForeignKey("ChatCommandId");

                    b.Navigation("ChatCommand");
                });

            modelBuilder.Entity("Koishibot.Core.Features.ChatCommands.Models.CommandTimerGroup", b =>
                {
                    b.HasOne("Koishibot.Core.Features.ChatCommands.Models.ChatCommand", null)
                        .WithMany()
                        .HasForeignKey("ChatCommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Koishibot.Core.Features.ChatCommands.Models.TimerGroup", null)
                        .WithMany()
                        .HasForeignKey("TimerGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Koishibot.Core.Features.Dandle.Models.DandleResult", b =>
                {
                    b.HasOne("Koishibot.Core.Features.Dandle.Models.DandleWord", "DandleWord")
                        .WithMany("DandleResults")
                        .HasForeignKey("DandleWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DandleWord");
                });

            modelBuilder.Entity("Koishibot.Core.Features.RaidSuggestions.Models.OutgoingRaid", b =>
                {
                    b.HasOne("Koishibot.Core.Features.TwitchUsers.Models.TwitchUser", "RaidedUser")
                        .WithMany("UsersSuggestingThisRaidTarget")
                        .HasForeignKey("RaidedUserId")
                        .IsRequired();

                    b.HasOne("Koishibot.Core.Features.StreamInformation.Models.StreamSession", "StreamSession")
                        .WithOne("OutgoingRaid")
                        .HasForeignKey("Koishibot.Core.Features.RaidSuggestions.Models.OutgoingRaid", "StreamSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Koishibot.Core.Features.TwitchUsers.Models.TwitchUser", "SuggestedByUser")
                        .WithMany("RaidsSuggestedByThisUser")
                        .HasForeignKey("SuggestedByUserId")
                        .IsRequired();

                    b.Navigation("RaidedUser");

                    b.Navigation("StreamSession");

                    b.Navigation("SuggestedByUser");
                });

            modelBuilder.Entity("Koishibot.Core.Features.Raids.Models.IncomingRaid", b =>
                {
                    b.HasOne("Koishibot.Core.Features.TwitchUsers.Models.TwitchUser", "RaidedByUser")
                        .WithMany("RaidsFromThisUser")
                        .HasForeignKey("RaidedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaidedByUser");
                });

            modelBuilder.Entity("Koishibot.Core.Features.StreamInformation.Models.LiveStream", b =>
                {
                    b.HasOne("Koishibot.Core.Features.StreamInformation.Models.StreamSession", "StreamSession")
                        .WithMany("LiveStreams")
                        .HasForeignKey("StreamSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StreamSession");
                });

            modelBuilder.Entity("Koishibot.Core.Features.StreamInformation.Models.StreamSession", b =>
                {
                    b.HasOne("Koishibot.Core.Features.StreamInformation.Models.YearlyQuarter", "YearlyQuarter")
                        .WithMany("StreamSessions")
                        .HasForeignKey("YearlyQuarterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("YearlyQuarter");
                });

            modelBuilder.Entity("Koishibot.Core.Features.StreamInformation.Models.StreamStats", b =>
                {
                    b.HasOne("Koishibot.Core.Features.StreamInformation.Models.StreamCategory", "StreamCategory")
                        .WithMany()
                        .HasForeignKey("StreamCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StreamCategory");
                });

            modelBuilder.Entity("Koishibot.Core.Features.Supports.Models.ChannelFollow", b =>
                {
                    b.HasOne("Koishibot.Core.Features.TwitchUsers.Models.TwitchUser", "TwitchUser")
                        .WithMany("ChannelFollows")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TwitchUser");
                });

            modelBuilder.Entity("Koishibot.Core.Features.Supports.Models.GiftSubscription", b =>
                {
                    b.HasOne("Koishibot.Core.Features.TwitchUsers.Models.TwitchUser", "TwitchUser")
                        .WithMany("GiftedSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TwitchUser");
                });

            modelBuilder.Entity("Koishibot.Core.Features.Supports.Models.Kofi", b =>
                {
                    b.HasOne("Koishibot.Core.Features.TwitchUsers.Models.TwitchUser", "TwitchUser")
                        .WithMany("KofiSupport")
                        .HasForeignKey("UserId");

                    b.Navigation("TwitchUser");
                });

            modelBuilder.Entity("Koishibot.Core.Features.Supports.Models.SETip", b =>
                {
                    b.HasOne("Koishibot.Core.Features.TwitchUsers.Models.TwitchUser", "TwitchUser")
                        .WithMany("SETips")
                        .HasForeignKey("UserId");

                    b.Navigation("TwitchUser");
                });

            modelBuilder.Entity("Koishibot.Core.Features.Supports.Models.Subscription", b =>
                {
                    b.HasOne("Koishibot.Core.Features.TwitchUsers.Models.TwitchUser", "TwitchUser")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TwitchUser");
                });

            modelBuilder.Entity("Koishibot.Core.Features.Supports.Models.SupportTotal", b =>
                {
                    b.HasOne("Koishibot.Core.Features.TwitchUsers.Models.TwitchUser", "TwitchUser")
                        .WithOne("SupportTotal")
                        .HasForeignKey("Koishibot.Core.Features.Supports.Models.SupportTotal", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TwitchUser");
                });

            modelBuilder.Entity("Koishibot.Core.Features.Supports.Models.TwitchCheer", b =>
                {
                    b.HasOne("Koishibot.Core.Features.TwitchUsers.Models.TwitchUser", "TwitchUser")
                        .WithMany("Cheers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TwitchUser");
                });

            modelBuilder.Entity("Koishibot.Core.Features.ChannelPoints.Models.ChannelPointReward", b =>
                {
                    b.Navigation("ChannelPointRedemptions");
                });

            modelBuilder.Entity("Koishibot.Core.Features.ChatCommands.Models.ChatCommand", b =>
                {
                    b.Navigation("CommandNames");
                });

            modelBuilder.Entity("Koishibot.Core.Features.Dandle.Models.DandleWord", b =>
                {
                    b.Navigation("DandleResults");
                });

            modelBuilder.Entity("Koishibot.Core.Features.StreamInformation.Models.StreamSession", b =>
                {
                    b.Navigation("LiveStreams");

                    b.Navigation("OutgoingRaid");
                });

            modelBuilder.Entity("Koishibot.Core.Features.StreamInformation.Models.YearlyQuarter", b =>
                {
                    b.Navigation("StreamSessions");
                });

            modelBuilder.Entity("Koishibot.Core.Features.TwitchUsers.Models.TwitchUser", b =>
                {
                    b.Navigation("Attendance");

                    b.Navigation("ChannelFollows");

                    b.Navigation("Cheers");

                    b.Navigation("GiftedSubscriptions");

                    b.Navigation("KofiSupport");

                    b.Navigation("KoiKinDragons");

                    b.Navigation("RaidsFromThisUser");

                    b.Navigation("RaidsSuggestedByThisUser");

                    b.Navigation("RedeemedChannelPointRewards");

                    b.Navigation("SETips");

                    b.Navigation("Subscriptions");

                    b.Navigation("SupportTotal");

                    b.Navigation("UsersSuggestingThisRaidTarget");
                });
#pragma warning restore 612, 618
        }
    }
}
